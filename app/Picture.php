<?php

namespace Cropan;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Tumblr\API\Client;

class Picture extends Model
{
    protected $table = 'pictures';
    protected $fillable = ['update_id', 'url', 'user_id', 'sent_at', 'published_at', 'created_at', 'updated_at'];
    protected $appends = ['numVotes'];

    // Attributes
    public function getNumVotesAttribute()
    {
        return ($this->yes + $this->no);
    }

    // Scopes
    public function scopeSent($query) {
        return $query->whereNotNull('sent_at');
    }

    public function scopePublished($query) {
        return $query->whereNotNull('published_at');
    }

    // Relationships
    public function votes()
    {
        return $this->hasMany(Vote::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    // Events
    static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        parent::creating(function (Picture $picture) {
            if (is_null($picture->user_id)) {
                // assign Cropanbot as uploader
                $bot_id = explode(':', env('TELEGRAM_BOT_TOKEN'));
                $bot_id = $bot_id[0];
                $picture->user_id = $bot_id;
            }

            return true;
        });

        parent::saving(function (Picture $picture) {
            $picture->score = ($picture->yes - $picture->no);

            return true;
        });
    }

    // Functions
    public function uploadToTumblr() {
        // publish to Tumblr
        $client = new Client(env('TUMBLR_CONSUMER_KEY'), env('TUMBLR_CONSUMER_SECRET'));
        $client->setToken(env('TUMBLR_TOKEN'), env('TUMBLR_TOKEN_SECRET'));
        $client->createPost(env('TUMBLR_BLOG'), [
            'type' => 'photo',
            'state' => 'queue',
            'tags' => env('TUMBLR_TAGS'),
            'source' => $this->url
        ]);

        $this->published_at = Carbon::now();
        $this->save();
    }

    public function sendToGroup()
    {
        $keyboard = [["YLD", "NO"]];

        $markup = \Telegram::replyKeyboardMarkup([
            'keyboard' => $keyboard,
            'one_time_keyboard' => true,
            'resize_keyboard' => true
        ]);

        \Telegram::sendMessage([
            'chat_id' => env('TELEGRAM_GROUP_ID'),
            'text' => $this->url,
            'reply_markup' => $markup
        ]);
    }
}
