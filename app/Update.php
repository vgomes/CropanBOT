<?php

namespace Cropan;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\QueryException;
use Symfony\Component\Debug\Exception\FatalThrowableError;
use \Telegram\Bot\Objects\Update as UpdateObject;

class Update extends Model
{
    use SoftDeletes;
    protected $table = 'updates';
    protected $fillable = ['update_id', 'user_id', 'type', 'reply_to', 'text', 'content', 'date'];

    /**
     * Imports Telegram Update objects into the database (stored for debug and development reasons)
     * @param UpdateObject $update
     */
    public function import(UpdateObject $update)
    {
        $message = $update->getMessage();
        if (is_null($message)) {
            $message = $update->getEditedMessage();
        }

        $updateId = $message->getMessageId();

        $update = Update::find($updateId);

        if (is_null($update)) {
            $userId = $message->getFrom()->getId();
            $type = $message->getChat()->getType();

            if (!is_null($message->getReplyToMessage())) {
                $reply_to = $message->getReplyToMessage()->getText();
                // check if it contains a picture url
                preg_match('/http(?:s)?:\/\/[0-9a-zA-Z;.\/\-?:@=_#&%~,+$]+/', $reply_to, $matches);

                if (count($matches) > 0) {
                    $update->text = $matches[0];
                } else {
                    $reply_to = null;
                }

            } else {
                $reply_to = null;
            }
            $text = $message->getText();
            $content = $update;
            $date = $message->getDate();

            try {
                $this->create([
                    'update_id' => $updateId,
                    'user_id' => $userId,
                    'type' => $type,
                    'reply_to' => $reply_to,
                    'text' => $text,
                    'content' => $content,
                    'date' => Carbon::createFromTimestamp($date)
                ]);
            } catch (QueryException $e) {
                // Already stored
//            \Log::error($e->getMessage());
            }
        }
    }

    // Events
    static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (Update $update) {
            // check if user belongs to desired group
            if (isAllowedUserId($update->user_id)) {

                if (is_null($update->text)) {
                    // if update contains a picture or url, store it
                    if (!is_null($update->content->getMessage()->getPhoto())) {
                        $url = urlFromTelegramPhoto($update->content->getMessage()->getPhoto());
                        $update->text = $url;
                    } elseif (!is_null($update->content->getMessage()->getDocument())) {
                        $document = $update->content->getMessage()->getDocument();

                        switch ($document->getMimeType()) {
                            case 'image/png' :
                            case 'image/jpeg' :
                            case 'image/jpg' :
                                $url = urlFromTelegramDocument($document);
                                $update->text = $url;
                                break;
                        }
                    }

                } else {
                    // check if it contains a picture url
                    preg_match('/http(?:s)?:\/\/[0-9a-zA-Z;.\/\-?:@=_#&%~,+$]+/', $update->text, $matches);

                    if (count($matches) > 0) {
                        $update->text = $matches[0];
                    }
                }

                return true;
            } else {
                return false;
            }
        });
    }
}
